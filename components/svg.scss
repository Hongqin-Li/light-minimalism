@import "../config.scss";

$border-color--inactive: #777;

%svg-switch {
    display: inline-flex;
    position:relative;
    height: 1.4em;
    width: 1.4em;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    > svg {
        width: 1.4em;
        height: 1.4em;
    }
    > input { display: none; }

    > input ~ svg {
        --fill: var(--fill-color--inactive, transparent);
        --shadow: var(--shadow-color--inactive, transparent);
        --border: #{var(--border-color--inactive, $border-color--inactive)};
    }
    > input:checked ~ svg {
        --fill: var(--fill-color);
        --border: var(--border-color);
        --shadow: var(--shadow-color);
    }
}

// Heart Begin
$bubble-d: 2.3em; // bubble diameter
$bubble-r: .5*$bubble-d; // bubble-radius
$particle-d: .3em;
$particle-r: .5*$particle-d;

@mixin particles($k) {
    $shadow-list: ();
    $n-groups: 7;
    $group-base-angle: 360deg/$n-groups;
    $group-distr-r: (1 + $k*.25)*$bubble-r;
    $n-particles: 2;
    $particle-base-angle: 360deg/$n-particles;
    $particle-off-angle: 60deg; // offset angle from radius
    $spread-r: -$k*$particle-r;
    
    @for $i from 0 to $n-groups {
        $group-curr-angle: $i*$group-base-angle - 90deg;
        $xg: $group-distr-r*cos($group-curr-angle);
        $yg: $group-distr-r*sin($group-curr-angle);
        
        @for $j from 0 to $n-particles {
            $particle-curr-angle: $group-curr-angle + 
                $particle-off-angle + $j*$particle-base-angle;
            $xs: $xg + $particle-d*cos($particle-curr-angle);
            $ys: $yg + $particle-d*sin($particle-curr-angle);
            
            $shadow-list: $shadow-list, $xs $ys 0 $spread-r 
                hsl(($i + $j)*$group-base-angle, 100%, 75%);
        }
    }
    box-shadow: $shadow-list;
}

@mixin bubble($ext) {
    transform: scale(1);
    border-color: #cc8ef5;
    border-width: $ext;
}
@keyframes heart {
    0%, 17.5% { transform: scale(0); }
    100% { transform: scale(1); }
}
@keyframes heart-wobble {
    0%, 30% { transform: translate(-50%, -50%) scale(0);}
    60% { transform: translate(-50%, -50%) scale(1.3);}
    70% { transform: translate(-50%, -50%) scale(0.9);}
    80% { transform: translate(-50%, -50%) scale(1.05);}
    90% { transform: translate(-50%, -50%) scale(0.96);}
    100% { transform: translate(-50%, -50%) scale(1);}
}
@keyframes bubble {
    0% {
        border-color: #e2264d;
        border-width: $bubble-r;
    }
    30% {
        border-color: #cc8ef5;
        border-width: $bubble-r;
    }
    40%, 100% {
        border-color: rgba(#cc8ef5, .4);
        border-width: 0;
    }
}
@keyframes particles {
    0%, 20% { opacity: 0; }
    25% {
        opacity: 1;
        @include particles(0);
    }
}

.switch--heart {
    color: #e2264d;
    position: relative;
    height: 1.4em;
    width: 1.4em;
    display: inline-flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    > input {
        position: absolute;
        top: 0;
        left: 0;
        display: none;
        &:checked + * {
            color: #e2264d;
            animation: heart 1s cubic-bezier(.17, .89, .32, 1.49);
            
            &:before, &:after {
                animation: inherit;
                animation-timing-function: ease-out;
            }
            
            &:before {
                will-change: transform, border-width, border-color;
                animation-name: bubble;
            }
            
            &:after {
                will-change: opacity, box-shadow;
                animation-name: particles;
            }
        }
    }

    > input + * {
        align-self: center;
        position: relative;
        color: #aab8c2;
        height: 1em;
        width: 1em;
        display: inline-block;
        transform: scale(0);
        
        &:before, &:after {
            position: absolute;
            z-index: -1;
            top: 50%; left: 50%;
            border-radius: 50%;
            content: '';
        }
        // Ring
        &:before {
            box-sizing: border-box;
            margin: -$bubble-r;
            border: solid $bubble-r #e2264d;
            width: $bubble-d; height: $bubble-d;
        }
        // Particles
        &:after {
            margin: -$particle-r;
            width: $particle-d; height: $particle-d;
            @include particles(1);
        }
    }
    // Heart
    > input + * + * {
        color: currentColor;
        position: absolute;
        top: 50%;
        left: 50%;
        width: 1.4em;
        height: 1.4em;
        display: flex;
        align-items: center;
        justify-content: center;
        pointer-events: none;
        transform: translate(-50%, -50%);

        // FIXME: these are support for normal icon fonts
        //opacity: $disabled-opacity;
        //transition: opacity .2s;
        //> i { font-size: 1.3em; }
        --fill: var(--fill-color--inactive, transparent);
        --shadow: var(--shadow-color--inactive, transparent);
        --border: #{var(--border-color--inactive, $border-color--inactive)};
    }
    > input:checked + * + * {
        // FIXME: these are support for normal icon fonts
        //opacity: 1;
        animation: heart-wobble 1s ease-out;
        --fill: var(--fill-color);
        --border: var(--border-color);
        --shadow: var(--shadow-color);
    }
}

.switch--comment {
    @extend %svg-switch;
    > svg {
        fill: var(--border-color, currentColor);
    }
    > input + * {
        &::before, &::after {
            content: "";
            position: absolute;
            display: block;
            left: $small-spacing+.05em;
            width: 0;
            height: 1px;
            background: var(--border-color, currentColor);
            transition: width .5s cubic-bezier(0.23, 1, 0.32, 1); 
        }
        &::before {
            top: .8em;
            transition-duration: 1s;
        }
        &::after {
            top: 1.1em;
        }
    }
    > input:checked + * {
        &::before, &::after {
            transition: width .5s cubic-bezier(0.23, 1, 0.32, 1); 
        }
        &::before { 
            width: .9em;
        }
        &::after { width: .8em;
            transition-delay: .2s;
        }
    }
}


$edit-timing-function: cubic-bezier(0.23, 1, 0.32, 1);
@keyframes edit-animation {
    0% {
        transform: translate(0, 0) rotate(0deg);
    }
    20% {
        transform: translate(100%, -25%) rotate(-45deg);
    }
    30% {
        transform: translate(100%, 5%) rotate(-65deg);
        animation-timing-function: $edit-timing-function;
    }
    100% {
        transform: translate(0, 0) rotate(0deg);
    }
}
@keyframes edit-line-animation {
    0% {
        transform: translateX(100%) scaleX(0);
        animation-timing-function: $edit-timing-function;
    }
    100% {
        transform: translateX(0) scaleX(0.8);
    }
}

.switch--edit {
    // Customize
    //color: rgba(160, 0, 0, .8);
    $duration: 1s;
    @extend %svg-switch;
    > input ~ svg {
        //transform: translate(0, 0) rotate(0deg);
        //transition: transform .3s ease-out;
        fill: currentColor;
        transform-origin: left bottom;
        //opacity: $disabled-opacity;
        //transition: opacity .2s;
        --primary: var(--primary-color--inactive, transparent);
        --secondary: var(--secondary-color--inactive, transparent);
        --eraser: var(--eraser-color--inactive, transparent);
    }
    > input:checked ~ svg {
        //opacity: 1;
        animation: edit-animation $duration;
        --primary: var(--primary-color);
        --secondary: var(--secondary-color);
        --eraser: var(--eraser-color);
    }
    > input + * {
        position: absolute;
        height: .1em;
        width: 100%;
        top: 105%;
        left: 0%;
        background: var(--border-color, #2D213F);
        transform-origin: left center;
        transform: translateX(0) scaleX(0);
    }
    > input:checked + * {
        will-change: transform;
        animation: edit-line-animation 0.7*$duration 0.3*$duration;
        width: 0;
        transition: width 0.6*$duration cubic-bezier(.68,0,.77,0) 0.4*$duration;
    }
}

.switch--search {

}

.switch--msg {
    @extend %svg-switch;
}

